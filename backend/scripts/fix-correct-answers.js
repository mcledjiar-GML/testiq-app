#!/usr/bin/env node
/**
 * ðŸ”§ CORRECTION RÃ‰PONSES CORRECTES
 * ===============================
 * 
 * Corriger les 14 questions oÃ¹ correctAnswer ne correspond pas
 * Ã  l'option marquÃ©e isCorrect = true
 */

const mongoose = require('mongoose');
const QuestionV2 = require('../models/QuestionV2');
require('dotenv').config();

class CorrectAnswerFixer {
    async connect() {
        const mongoUri = process.env.MONGODB_URI?.replace('mongo:', 'localhost:') || 'mongodb://localhost:27017/iq_test_db';
        await mongoose.connect(mongoUri);
        console.log('âœ… ConnectÃ© Ã  MongoDB');
    }

    async disconnect() {
        await mongoose.disconnect();
        console.log('ðŸ“Œ Connexion fermÃ©e');
    }

    /**
     * Diagnostiquer et corriger les problÃ¨mes de rÃ©ponses correctes
     */
    async fixCorrectAnswers() {
        console.log('ðŸ”§ === CORRECTION RÃ‰PONSES CORRECTES ===\n');

        try {
            await this.connect();

            const questions = await QuestionV2.find({ state: 'published' });
            const problematicQuestions = [];

            // Identifier les questions problÃ©matiques
            for (const question of questions) {
                const correctOptions = question.options.filter(opt => opt.isCorrect);
                const correctIndex = question.options.findIndex(opt => opt.isCorrect);
                
                const issues = [];
                
                if (correctOptions.length === 0) {
                    issues.push('Aucune option marquÃ©e correcte');
                } else if (correctOptions.length > 1) {
                    issues.push(`${correctOptions.length} options marquÃ©es correctes`);
                }
                
                if (correctIndex !== question.correctAnswer) {
                    issues.push(`correctAnswer (${question.correctAnswer}) â‰  option correcte (${correctIndex})`);
                }

                if (issues.length > 0) {
                    problematicQuestions.push({
                        question,
                        issues,
                        correctIndex,
                        correctOptions: correctOptions.length
                    });
                }
            }

            console.log(`ðŸ“Š Questions problÃ©matiques trouvÃ©es: ${problematicQuestions.length}`);

            // Corriger chaque question
            let fixed = 0;
            for (const { question, issues, correctIndex } of problematicQuestions) {
                console.log(`\nðŸ”§ Q${question.questionIndex} (${question.qid})`);
                console.log(`   Issues: ${issues.join(', ')}`);
                console.log(`   correctAnswer actuel: ${question.correctAnswer}`);
                
                // StratÃ©gie de correction
                let needsSave = false;

                // Cas 1: Aucune option marquÃ©e correcte
                if (correctIndex === -1) {
                    // Marquer l'option indiquÃ©e par correctAnswer comme correcte
                    if (question.correctAnswer >= 0 && question.correctAnswer < question.options.length) {
                        question.options[question.correctAnswer].isCorrect = true;
                        console.log(`   âœ… Option ${question.correctAnswer} marquÃ©e correcte`);
                        needsSave = true;
                    } else {
                        // Si correctAnswer invalide, prendre la premiÃ¨re option
                        question.options[0].isCorrect = true;
                        question.correctAnswer = 0;
                        console.log(`   âœ… Option 0 marquÃ©e correcte (fallback)`);
                        needsSave = true;
                    }
                }
                // Cas 2: Multiple options correctes
                else if (issues.some(i => i.includes('options marquÃ©es correctes'))) {
                    // DÃ©marquer toutes sauf celle indiquÃ©e par correctAnswer
                    question.options.forEach((opt, idx) => {
                        opt.isCorrect = (idx === question.correctAnswer);
                    });
                    console.log(`   âœ… Seule option ${question.correctAnswer} marquÃ©e correcte`);
                    needsSave = true;
                }
                // Cas 3: Discordance correctAnswer vs option correcte
                else if (correctIndex !== question.correctAnswer) {
                    // Aligner correctAnswer sur l'option marquÃ©e correcte
                    question.correctAnswer = correctIndex;
                    console.log(`   âœ… correctAnswer alignÃ© sur ${correctIndex}`);
                    needsSave = true;
                }

                if (needsSave) {
                    await question.save();
                    fixed++;
                    console.log(`   ðŸ’¾ SauvegardÃ©`);
                } else {
                    console.log(`   âšª Aucune correction possible`);
                }
            }

            console.log(`\nðŸŽ¯ === RÃ‰SUMÃ‰ ===`);
            console.log(`ðŸ“Š Questions problÃ©matiques: ${problematicQuestions.length}`);
            console.log(`âœ… Questions corrigÃ©es: ${fixed}`);
            console.log(`ðŸ“ˆ Taux de rÃ©ussite: ${((fixed / problematicQuestions.length) * 100).toFixed(1)}%`);

            return fixed;

        } finally {
            await this.disconnect();
        }
    }
}

// ExÃ©cution si appelÃ© directement
if (require.main === module) {
    const fixer = new CorrectAnswerFixer();
    
    fixer.fixCorrectAnswers()
        .then(count => {
            console.log(`\nðŸŽ‰ ${count} questions corrigÃ©es !`);
            process.exit(0);
        })
        .catch(error => {
            console.error('\nðŸ’¥ Erreur:', error);
            process.exit(1);
        });
}

module.exports = CorrectAnswerFixer;